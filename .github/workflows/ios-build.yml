name: iOS Build and Archive

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_ipa:
        description: 'Create IPA file (requires signing certificates)'
        required: false
        default: 'false'
        type: boolean

env:
  XCODE_PROJECT: HAiPAD.xcodeproj
  SCHEME: HAiPAD
  CONFIGURATION: Release
  DERIVED_DATA_PATH: build

jobs:
  build:
    name: Build iOS Application
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: |
        # Try to select the latest available Xcode version
        if [ -d "/Applications/Xcode_15.0.app" ]; then
          sudo xcode-select -switch /Applications/Xcode_15.0.app/Contents/Developer
        elif [ -d "/Applications/Xcode_14.3.app" ]; then
          sudo xcode-select -switch /Applications/Xcode_14.3.app/Contents/Developer
        elif [ -d "/Applications/Xcode.app" ]; then
          sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        else
          echo "Using default Xcode installation"
        fi
      
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Simulators
      run: xcrun simctl list devices available
      
    - name: Cache Derived Data
      uses: actions/cache@v3
      with:
        path: ${{ env.DERIVED_DATA_PATH }}
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
    
    - name: Build for iOS Simulator
      run: |
        xcodebuild \
          -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration "${{ env.CONFIGURATION }}" \
          -destination 'platform=iOS Simulator,name=iPad Air (5th generation),OS=latest' \
          -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
          clean build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Build for iOS Device (Unsigned)
      run: |
        xcodebuild \
          -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration "${{ env.CONFIGURATION }}" \
          -destination 'generic/platform=iOS' \
          -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
          clean build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Archive for IPA (if certificates available)
      if: github.event.inputs.create_ipa == 'true' || (secrets.APPLE_CERTIFICATE_BASE64 != '' && secrets.APPLE_CERTIFICATE_PASSWORD != '')
      run: |
        # This step will only run if signing certificates are configured
        # Set up keychain with certificates here if secrets are available
        echo "🔐 Code signing certificates detected - creating signed archive"
        
        # Create archive
        xcodebuild \
          -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration "${{ env.CONFIGURATION }}" \
          -destination 'generic/platform=iOS' \
          -derivedDataPath "${{ env.DERIVED_DATA_PATH }}" \
          -archivePath "${{ env.DERIVED_DATA_PATH }}/HAiPAD.xcarchive" \
          archive
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        
    - name: Export IPA
      if: (github.event.inputs.create_ipa == 'true' || (secrets.APPLE_CERTIFICATE_BASE64 != '' && secrets.APPLE_CERTIFICATE_PASSWORD != '')) && success()
      run: |
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>\${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild \
          -exportArchive \
          -archivePath "${{ env.DERIVED_DATA_PATH }}/HAiPAD.xcarchive" \
          -exportPath "${{ env.DERIVED_DATA_PATH }}/export" \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Create Unsigned IPA (Development Only)
      if: github.event.inputs.create_ipa != 'true' && (secrets.APPLE_CERTIFICATE_BASE64 == '' || secrets.APPLE_CERTIFICATE_PASSWORD == '')
      run: |
        echo "⚠️  Creating unsigned IPA for development/testing purposes only"
        echo "This IPA cannot be installed on physical devices without proper code signing"
        
        # Find the built app
        APP_PATH=$(find "${{ env.DERIVED_DATA_PATH }}" -name "*.app" -path "*/Build/Products/Release-iphoneos/*" | head -1)
        
        if [ -n "$APP_PATH" ]; then
          echo "Found app at: $APP_PATH"
          
          # Create Payload directory
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          
          # Create unsigned IPA
          zip -r HAiPAD-unsigned.ipa Payload/
          
          echo "✅ Created unsigned IPA: HAiPAD-unsigned.ipa"
          ls -la HAiPAD-unsigned.ipa
        else
          echo "❌ Could not find built app"
          exit 1
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-build-artifacts
        path: |
          HAiPAD-unsigned.ipa
          ${{ env.DERIVED_DATA_PATH }}/export/*.ipa
          ${{ env.DERIVED_DATA_PATH }}/**/*.dSYM
        retention-days: 30
        
    - name: Build Summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **iOS Simulator Build**: Successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ **iOS Device Build**: Successful (unsigned)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "HAiPAD-unsigned.ipa" ]; then
          echo "📱 **Unsigned IPA**: Created (development only)" >> $GITHUB_STEP_SUMMARY
          echo "⚠️  *Note: Unsigned IPA cannot be installed on physical devices*" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "${{ env.DERIVED_DATA_PATH }}/export" ]; then
          echo "🔐 **Signed IPA**: Created and ready for distribution" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔐 **Signed IPA**: Not created (requires Apple Developer certificates)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- For device testing: Set up Apple Developer certificates in repository secrets" >> $GITHUB_STEP_SUMMARY
        echo "- For App Store distribution: Configure App Store Connect API key" >> $GITHUB_STEP_SUMMARY
        echo "- See README.md for detailed setup instructions" >> $GITHUB_STEP_SUMMARY